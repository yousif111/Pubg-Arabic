local weaponSystem = require(game:service'ReplicatedStorage'.WeaponsSystem.Libraries.BaseWeapon)
local Material = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/MaterialLua/master/Module.lua"))()

local client = game:GetService('Players').LocalPlayer;

local oldFire = weaponSystem.fire;
local oldGetConfigValue = weaponSystem.getConfigValue
local oldUseAmmo = weaponSystem.useAmmo;
local oldGetAmmo = weaponSystem.getAmmoInWeapon

local function getClosestPlayer()
    local final = nil
    local maxRange = math.huge;

    for i, player in next, game:GetService('Players'):GetPlayers() do
        if player == client then continue end
        if (not player.Character) then continue end

        local humanoid = player.Character:FindFirstChild('Humanoid');
        local head = player.Character:FindFirstChild('Head');

        if (not head) or (not humanoid) then continue end
        if (humanoid.Health <= 0) then continue end

        local vector, visible = workspace.CurrentCamera:WorldToViewportPoint(head.Position);
        if (not visible) then continue end

        local cursorPosition = game:GetService('UserInputService'):GetMouseLocation();
        local screenPosition = Vector2.new(vector.X, vector.Y);

        local difference = math.floor((screenPosition - cursorPosition).magnitude);
        if (difference < maxRange) then
            maxRange = difference
            final = head;
        end
    end
    return final;
end

function weaponSystem.getAmmoInWeapon(self, ...)
    local arguments = {...}
    if _G.infiniteAmmo then return 9e9 end
    return oldGetAmmo(self, unpack(arguments))
end

function weaponSystem.fire(self, ...)
    local arguments = {...};

    if _G.silentAim then
        local t = getClosestPlayer()
        if t then
            arguments[2] = (t.Position - arguments[1]).unit;
            arguments[3] = 1;
        end
    end

    return oldFire(self, unpack(arguments))
end

function weaponSystem.getConfigValue(self, ...)
    local arguments = {...}

    if _G.fastFire and arguments[1] == 'ShotCooldown' then
        return 0.01
    elseif _G.autoGuns and arguments[1] == 'FireMode' then
        return 'Automatic'
    elseif _G.noRecoil and (arguments[1] == 'RecoilMin' or arguments[1] == 'RecoilMax') then
        return 0
    elseif _G.noSpread and (arguments[1] == 'MinSpread' or arguments[1] == 'MaxSpread') then
        return 0
    end

    return oldGetConfigValue(self, unpack(arguments))
end

function weaponSystem.useAmmo(self, ...)
    local arguments = {...}
    if _G.infiniteAmmo then
        if (self.ammoInWeaponValue) then
            return 1;
        end
    end
    return oldUseAmmo(self, unpack(arguments))
end

local window = {} do
    local windowMeta = {} 
    windowMeta.__index = windowMeta

    function windowMeta:Tab(name)
        local tab = self.window.New({
            Title = name;
        })

        return setmetatable({
            window = self.window;
            tab = tab;
        }, windowMeta) 
    end

    function windowMeta:Toggle(name, callback)
        self.tab.Toggle({
            Text = name;
            Callback = callback;
        })
    end

    function windowMeta:Banner(name, options)
        local _menu = {}

        for name, str in next, options do
            _menu[name] = function() self.window.Banner({ Text = str }) end
        end

        self.tab.Button({
            Text = name;
            Menu = _menu
        })
    end

    function window.new(name)
        local main = Material.Load({
            Title = name;
            Style = 1;

            Theme = 'Jester';
            SizeX = 300;
            SizeY = 320;
        })

        return setmetatable({ window = main }, windowMeta) 
    end
end

local gui = window.new('No More Life#3333');
local tab = gui:Tab('Main');

tab:Toggle('Silent Aim', function(value) _G.silentAim = value end)
tab:Toggle('Infinite Ammo', function(value) _G.infiniteAmmo = value end)
tab:Toggle('No Recoil', function(value) _G.noRecoil = value end)
tab:Toggle('No Spread', function(value) _G.noSpread = value end)
tab:Toggle('Fast Guns', function(value) _G.fastFire = value end)
tab:Toggle('Automatic Guns', function(value) _G.autoGuns = value end)
tab:Banner('Credits', {
    Scripting = "No More Life#3333";
    ["Mental support"] = "No More Life#3333",
})
local Player = game:GetService("Players").LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local Mouse = Player:GetMouse()

local function Dist(pointA, pointB) -- magnitude errors for some reason  : (
    return math.sqrt(math.pow(pointA.X - pointB.X, 2) + math.pow(pointA.Y - pointB.Y, 2))
end

local function GetClosest(points, dest)
    local min  = math.huge 
    local closest = nil
    for _,v in pairs(points) do
        local dist = Dist(v, dest)
        if dist < min then
            min = dist
            closest = v
        end
    end
    return closest
end

local function DrawESP(plr)
    local Box = Drawing.new("Quad")
    Box.Visible = false
    Box.PointA = Vector2.new(0, 0)
    Box.PointB = Vector2.new(0, 0)
    Box.PointC = Vector2.new(0, 0)
    Box.PointD = Vector2.new(0, 0)
    Box.Color = Color3.fromRGB(255, 255, 255)
    Box.Thickness = 2
    Box.Transparency = 1

    local function Update()
        local c
        c = game:GetService("RunService").RenderStepped:Connect(function()
            if plr.Character ~= nil and plr.Character:FindFirstChildOfClass("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0 and plr.Character:FindFirstChild("Head") ~= nil then
                local pos, vis = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
                if vis then 
                    local points = {}
                    local c = 0
                    for _,v in pairs(plr.Character:GetChildren()) do
                        if v:IsA("BasePart") then
                            c = c + 1
                            local p = Camera:WorldToViewportPoint(v.Position)
                            if v.Name == "HumanoidRootPart" then
                                p = Camera:WorldToViewportPoint((v.CFrame * CFrame.new(0, 0, -v.Size.Z)).p)
                            elseif v.Name == "Head" then
                                p = Camera:WorldToViewportPoint((v.CFrame * CFrame.new(0, v.Size.Y/2, v.Size.Z/1.25)).p)
                            elseif string.match(v.Name, "Left") then
                                p = Camera:WorldToViewportPoint((v.CFrame * CFrame.new(-v.Size.X/2, 0, 0)).p)
                            elseif string.match(v.Name, "Right") then
                                p = Camera:WorldToViewportPoint((v.CFrame * CFrame.new(v.Size.X/2, 0, 0)).p)
                            end
                            points[c] = p
                        end
                    end
                    local Left = GetClosest(points, Vector2.new(0, pos.Y))
                    local Right = GetClosest(points, Vector2.new(Camera.ViewportSize.X, pos.Y))
                    local Top = GetClosest(points, Vector2.new(pos.X, 0))
                    local Bottom = GetClosest(points, Vector2.new(pos.X, Camera.ViewportSize.Y))

                    if Left ~= nil and Right ~= nil and Top ~= nil and Bottom ~= nil then
                        Box.PointA = Vector2.new(Right.X, Top.Y)
                        Box.PointB = Vector2.new(Left.X, Top.Y)
                        Box.PointC = Vector2.new(Left.X, Bottom.Y)
                        Box.PointD = Vector2.new(Right.X, Bottom.Y)

                        Box.Visible = true
                    else 
                        Box.Visible = false
                    end
                else 
                    Box.Visible = false
                end
            else
                Box.Visible = false
                if game.Players:FindFirstChild(plr.Name) == nil then
                    c:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(Update)()
end

for _,v in pairs(game:GetService("Players"):GetChildren()) do
    if v.Name ~= Player.Name then 
        DrawESP(v)
    end
end

game:GetService("Players").PlayerAdded:Connect(function(v)
    DrawESP(v)
end)
